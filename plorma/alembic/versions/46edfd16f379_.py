"""Add missing foreign keys

Revision ID: 46edfd16f379
Revises: 2e11045d6d2f
Create Date: 2015-01-17 09:11:21.374025

"""

# revision identifiers, used by Alembic.
revision = '46edfd16f379'
down_revision = '2e11045d6d2f'

from alembic import op
import sqlalchemy as sa


# In case of an SQLITE Database we need to do this with a workaround by
# renaming the old table. Createing a new one and than copying the
# content from the old to the new table.
UPGRADE = """
ALTER TABLE forms RENAME to formsold;
CREATE TABLE forms ( id INTEGER NOT NULL, gid INTEGER, uid INTEGER, uuid CHAR(32), category INTEGER, created DATETIME, definition TEXT, description TEXT, title VARCHAR, updated DATETIME, review_state_id INTEGER, mid INTEGER, PRIMARY KEY (id), FOREIGN KEY(gid) REFERENCES usergroups (id), FOREIGN KEY(uid) REFERENCES users (id), FOREIGN KEY(mid) REFERENCES modules (id));
INSERT INTO forms SELECT * FROM formsold;
DROP TABLE formsold;


ALTER TABLE modules RENAME to modulesold;
CREATE TABLE modules ( id INTEGER NOT NULL, name TEXT NOT NULL, clazzpath TEXT NOT NULL, label TEXT NOT NULL, label_plural TEXT NOT NULL, description TEXT, str_repr TEXT, display TEXT, uuid CHAR(32), gid INTEGER, PRIMARY KEY (id), UNIQUE (clazzpath), UNIQUE (name), FOREIGN KEY(gid) REFERENCES usergroups (id));
INSERT INTO modules SELECT * FROM modulesold;
DROP TABLE modulesold;

ALTER TABLE tags RENAME to tagsold;
CREATE TABLE tags ( id INTEGER NOT NULL, gid INTEGER, uid INTEGER, description TEXT, name TEXT, type INTEGER, uuid CHAR(32), mid INTEGER, PRIMARY KEY (id), FOREIGN KEY(gid) REFERENCES usergroups (id), FOREIGN KEY(uid) REFERENCES users (id), FOREIGN KEY(mid) REFERENCES modules (id));
INSERT INTO tags SELECT * FROM tagsold;
DROP TABLE tagsold;

ALTER TABLE todos RENAME to todosold;
CREATE TABLE todos ( id INTEGER NOT NULL, gid INTEGER, uid INTEGER, deadline DATETIME, description TEXT, name TEXT, priority INTEGER, reminddate DATETIME, reminder INTEGER, todo_state_id INTEGER, assigned_id INTEGER, uuid CHAR(32), PRIMARY KEY (id), FOREIGN KEY(gid) REFERENCES usergroups (id), FOREIGN KEY(uid) REFERENCES users (id), FOREIGN KEY(assigned_id) REFERENCES users (id));
INSERT INTO todos SELECT * FROM todosold;
DROP TABLE todosold;
"""

DOWNGRADE = """
ALTER TABLE forms RENAME to formsold;
CREATE TABLE forms ( id INTEGER NOT NULL, gid INTEGER, uid INTEGER, uuid CHAR(32), category INTEGER, created DATETIME, definition TEXT, description TEXT, title VARCHAR, updated DATETIME, review_state_id INTEGER, mid INTEGER, PRIMARY KEY (id), FOREIGN KEY(gid) REFERENCES usergroups (id), FOREIGN KEY(uid) REFERENCES users (id));
INSERT INTO forms SELECT * FROM formsold;
DROP TABLE formsold;


ALTER TABLE modules RENAME to modulesold;
CREATE TABLE modules ( id INTEGER NOT NULL, name TEXT NOT NULL, clazzpath TEXT NOT NULL, label TEXT NOT NULL, label_plural TEXT NOT NULL, description TEXT, str_repr TEXT, display TEXT, uuid CHAR(32), gid INTEGER, PRIMARY KEY (id), UNIQUE (clazzpath), UNIQUE (name));
INSERT INTO modules SELECT * FROM modulesold;
DROP TABLE modulesold;

ALTER TABLE tags RENAME to tagsold;
CREATE TABLE tags ( id INTEGER NOT NULL, gid INTEGER, uid INTEGER, description TEXT, name TEXT, type INTEGER, uuid CHAR(32), mid INTEGER, PRIMARY KEY (id), FOREIGN KEY(gid) REFERENCES usergroups (id), FOREIGN KEY(uid) REFERENCES users (id));
INSERT INTO tags SELECT * FROM tagsold;
DROP TABLE tagsold;

ALTER TABLE todos RENAME to todosold;
CREATE TABLE todos ( id INTEGER NOT NULL, gid INTEGER, uid INTEGER, deadline DATETIME, description TEXT, name TEXT, priority INTEGER, reminddate DATETIME, reminder INTEGER, todo_state_id INTEGER, assigned_id INTEGER, uuid CHAR(32), PRIMARY KEY (id), FOREIGN KEY(gid) REFERENCES usergroups (id), FOREIGN KEY(uid) REFERENCES users (id));
INSERT INTO todos SELECT * FROM todosold;
DROP TABLE todosold;
"""


def iter_statements(stmts):
    for st in [x for x in stmts.split('\n') if x]:
        op.execute(st)


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    if op.get_context().dialect.name != 'sqlite':
        op.create_foreign_key(None, 'forms', 'modules', ['mid'], ['id'])
        op.create_foreign_key(None, 'modules', 'usergroups', ['gid'], ['id'])
        op.create_foreign_key(None, 'tags', 'modules', ['mid'], ['id'])
        op.create_foreign_key(None, 'todos', 'users', ['assigned_id'], ['id'])
    else:
        iter_statements(UPGRADE)


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    if op.get_context().dialect.name != 'sqlite':
        op.drop_constraint(None, 'todos', type_='foreignkey')
        op.drop_constraint(None, 'tags', type_='foreignkey')
        op.drop_constraint(None, 'modules', type_='foreignkey')
        op.drop_constraint(None, 'forms', type_='foreignkey')
    else:
        iter_statements(DOWNGRADE)
